// routes/image.js
import express from "express";
import axios from "axios";
import genAI from "../config/genAIClient.js";

const router = express.Router();

// Step 1: Enhance prompt from drawing
async function analyzeDrawingForPrompt(imageBase64, userPrompt) {
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    const analysisPrompt = `Analyze this drawing and combine it with the user's prompt: "${userPrompt}". 
    Describe what you see in the drawing and create an enhanced, detailed prompt for image generation that combines both the visual elements from the drawing and the user's text prompt. 
    Focus on artistic style, composition, colors, and mood. Keep it under 1000 characters.
    Return only the enhanced prompt, nothing else.`;

    const image = {
      inlineData: {
        data: imageBase64,
        mimeType: "image/png",
      },
    };

    const result = await model.generateContent([analysisPrompt, image]);
    return result.response.text();
  } catch (error) {
    console.error("Error analyzing drawing:", error);
    return userPrompt; 
  }
}

// Step 2: Generate image (currently Stability AI)
router.post("/", async (req, res) => {
  const { image, prompt } = req.body;

  if (!image || !prompt) {
    return res.json({
      success: false,
      error: "Image and prompt are required.",
    });
  }

  try {
    const base64Data = image.replace(/^data:image\/png;base64,/, "");

    // Analyze the drawing and enhance the prompt using Gemini
    const enhancedPrompt = await analyzeDrawingForPrompt(base64Data, prompt);

    // Generate image using Stability AI API (Core model - cheaper)
    const stabilityResponse = await axios.post(
      "https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image",
      {
        text_prompts: [
          {
            text: enhancedPrompt,
            weight: 1,
          },
        ],
        cfg_scale: 7,
        height: 1024,
        width: 1024,
        samples: 1,
        steps: 20,
      },
      {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
          Authorization: `Bearer ${process.env.STABILITY_API_KEY}`,
        },
      }
    );

    if (
      stabilityResponse.data.artifacts &&
      stabilityResponse.data.artifacts.length > 0
    ) {
      const generatedImageData = stabilityResponse.data.artifacts[0].base64;

      // Send image directly as base64 data URL
      const imageDataUrl = `data:image/png;base64,${generatedImageData}`;

      return res.json({
        success: true,
        imageUrl: imageDataUrl,
        enhancedPrompt: enhancedPrompt,
        originalPrompt: prompt,
      });
    } else {
      return res.json({
        success: false,
        error: "No image was generated by Stability AI.",
      });
    }
  } catch (error) {
    console.error("Error generating image:", error);
    if (error.response) {
      console.error("Stability AI API Error:", error.response.data);
      return res.json({
        success: false,
        error: `Stability AI Error: ${
          error.response.data.message || "Unknown error"
        }`,
      });
    }
    return res.json({
      success: false,
      error: error.message || "Failed to generate image.",
    });
  }
});

export default router;
